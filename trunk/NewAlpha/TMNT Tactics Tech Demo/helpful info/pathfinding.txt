function(fStart,fEnd,fDir,fRev) {
	// set up:
	var curx = fStart.x;
	var cury = fStart.y;
	var pathWeight = 0;
	var pathx = [];
	var pathy = [];
	var endx = fEnd.x;
	var endy = fEnd.y;
	
	// try to find a path:
	while(true) {
		if ((curx == pathx[pathWeight-4])&&(cury == pathy[pathWeight-4])) { pathWeight=10000; break; }
		oldx = pathx[pathWeight-1];
		oldy = pathy[pathWeight-1];
		pathx.push(curx);
		pathy.push(cury);
		pathWeight++;
		if (endx == curx && endy == cury) { break; }
		if (pathWeight > this.depth) { pathWeight = 10000; break; }
		
		if (fDir) { // favour x movements
			// move towards end:
			if ((curx < endx)&&(oldx != curx+1)&&(this.map[curx+1][cury])) { curx++; continue; }
			if ((curx > endx)&&(oldx != curx-1)&&(this.map[curx-1][cury])) { curx--; continue; }
			if ((cury < endy)&&(oldy != cury+1)&&(this.map[curx][cury+1])) { cury++; continue; }
			if ((cury > endy)&&(oldy != cury-1)&&(this.map[curx][cury-1])) { cury--; continue; }
			// can't move towards try lateral:
			if (curx == endx) {
				if ((oldx != curx+1)&&(this.map[curx+1][cury])) { curx++; continue; }
				if ((oldx != curx-1)&&(this.map[curx-1][cury])) { curx--; continue; }
			} else if (cury == endy) {
				if ((oldy != cury+1)&&(this.map[curx][cury+1])) { cury++; continue; }
				if ((oldy != cury-1)&&(this.map[curx][cury-1])) { cury--; continue; }
			}
			// can't move lateral, try away:
			if ((curx > endx)&&(oldx != curx+1)&&(this.map[curx+1][cury])) { curx++; continue; }
			else if ((oldx != curx-1)&&(this.map[curx-1][cury])) { curx--; continue; }
			if ((cury > endy)&&(oldy != cury+1)&&(this.map[curx][cury+1])) { cury++; continue; }
			else if ((oldy != cury-1)&&(this.map[curx][cury-1])) { cury--; continue; }
		} else { // favour y movements
			// move towards end:
			if ((cury < endy)&&(oldy != cury+1)&&(this.map[curx][cury+1])) { cury++; continue; }
			if ((cury > endy)&&(oldy != cury-1)&&(this.map[curx][cury-1])) { cury--; continue; }
			if ((curx < endx)&&(oldx != curx+1)&&(this.map[curx+1][cury])) { curx++; continue; }
			if ((curx > endx)&&(oldx != curx-1)&&(this.map[curx-1][cury])) { curx--; continue; }
			// can't move towards try lateral:
			if (cury == endy) {
				if ((oldy != cury-1)&&(this.map[curx][cury-1])) { cury--; continue; }
				if ((oldy != cury+1)&&(this.map[curx][cury+1])) { cury++; continue; }
			} else if (curx == endx) {
				if ((oldx != curx-1)&&(this.map[curx-1][cury])) { curx--; continue; }
				if ((oldx != curx+1)&&(this.map[curx+1][cury])) { curx++; continue; }
			}
			// can't move laterally, try away:
			if ((cury < endy)&&(oldy != cury-1)&&(this.map[curx][cury-1])) { cury--; continue; }
			else if ((oldy != cury+1)&&(this.map[curx][cury+1])) { cury++; continue; }
			if ((curx < endx)&&(oldx != curx-1)&&(this.map[curx-1][cury])) { curx--; continue; }
			else if ((oldx != curx+1)&&(this.map[curx+1][cury])) { curx++; continue; }
		} // end if
		
		// darn, we're stuck.
		pathWeight = 10000;
		break;
	} // end while
	// flip the path if it is reversed, and if we were successful
	if (fRev && pathWeight < 10000) {
		pathx.reverse();
		pathy.reverse();
	}
	return {xPath:pathx,yPath:pathy,weight:pathWeight,$dir:fDir};
}